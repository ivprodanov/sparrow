/* TODOs:
    - [x] Allow also only 'col' classes
*/
@use 'sass:math';
@use 'sass:list';

@function calculateRem($size) {
  $remSize: math.div($size, 16px);
  @return $remSize;
}

@function extract-value-from-rem($value) {
  @if unit($value) == rem {
    @return math.div($value, 1rem); // Remove the rem unit by dividing by 1rem
  }
  @error "The value must be in rem.";
}

@function divide-gutters($gutter, $container-max-width) {
  // Convert the gutter to rem if it's not already
  $gutter-in-rem: extract-value-from-rem($gutter);

  // Calculate the gutter percentage (relative to container width)
  $gutter-percentage: math.div($gutter-in-rem, calculateRem($container-max-width)) * 100;

  @return $gutter-percentage;
}

@function extract-value($value) {
  // Check if the value has a unit
  @if unit($value) != "" {
    @return math.div($value, 1#{unit($value)});
  }
  @error "The value must have a unit." + $value;
}

// Grid Variables
$grid-columns: 12;            // Number of columns
$container-max-width: 1200px; // Maximum container width
$gutters: (
  0: 0,
  1: 0.25rem,
  2: 0.5rem,
  3: 0.75rem,
  4: 1rem,
  5: 1.25rem,
  6: 1.5rem,
  7: 1.75rem,
  8: 2rem,
  9: 2.25rem,
  10: 2.5rem
); // Gutter sizes for gx-* classes

$breakpoints: (
  xs: 480px,
  sm: 768px,
  md: 1024px,
  lg: 1280px,
  xl: 1440px
);

// Container
.container {
  width: 100%;
  max-width: $container-max-width;
  margin-left: auto;
  margin-right: auto;
}

// Row (Flex container)
.row {
  display: flex;
  flex-wrap: wrap;

  // Generate gutter classes dynamically
  @each $key, $value in $gutters {
    &.gx-#{$key} {
      gap: #{$value}; // Assign the gutter value directly to the gap property
    }
  }
}

@mixin mediaQuery($bp) {
    @media (max-width: #{$bp}) {
      @content;
    }
}

@mixin col($span: 1, $gutter: 0, $breakpoint: null) {
  $column-width: 100;
  // Convert gutter to percentage of container width
  $gutter-percentage: 0;
  @if($gutter != 0) {
    $gutter-percentage: divide-gutters($gutter, $container-max-width);
  }
  // Calculate the column width as a percentage, accounting for gutter space
  @if ($span != 'default') {
    $column-width: math.div($span, $grid-columns) * 100;

  $column-width: ($column-width) - ($gutter-percentage);
      flex: 0 0 #{($column-width) } + '%' !important;
      max-width: #{($column-width) } + '%' !important;
} 

  @if $span == 'default' {
    flex: 1;
    max-width: 100%;
  }
}

// Column Class
@for $i from 1 through $grid-columns {

  .col {
    @include col('default', 0); // Default column
  }

  // Responsive Column Classes
  @each $breakpoint, $value in $breakpoints {
    .col-#{$i} {
        @include col($i, 0, $breakpoint);
    }
  }

  @each $breakpoint, $value in $breakpoints {
    @include mediaQuery($value) {
      .col-#{$i}-#{$breakpoint} {
        @include col($i, 0, $breakpoint);
      }
    }
  }


  // Generate gx-* specific column widths
  @each $key, $value in $gutters {
    .gx-#{$key} {
      justify-content: space-between;
      .col-#{$i} {
        @include col($i, $value); // Pass gutter dynamically to the column
      }
    }
  }
}

@mixin fontSize($size) {
  font-size: $size; // Fallback in px
  font-size: calculateRem($size);
}
