@use 'sass:math';

// Grid Variables
$grid-columns: 12;            // Number of columns
$grid-gutter: 16px;           // Default gap value in pixels
$container-max-width: 1200px; // Maximum container width
$breakpoints: (
  xs: 480px,
  sm: 768px,
  md: 1024px,
  lg: 1280px,
  xl: 1440px
);                            // Breakpoints for responsive design

// Container
.container {
  width: 100%;
  max-width: $container-max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $grid-gutter;
  padding-right: $grid-gutter;
}

// Row (Flex container)
.row {
  display: flex;
  flex-wrap: wrap;
  gap: 0; // Initially no gap for columns
}

// Column Mixin
@mixin col($span: 1, $breakpoint: null) {
  // Calculate width in percentage
  $column-width: math.div($span, $grid-columns) * 100%;

  // Adjust column width to account for gutter if gutter is defined
  @if $grid-gutter != 0 {
    flex: 0 0 #{$column-width};
    max-width: #{$column-width};
  }
  @else {
    flex: 0 0 #{$column-width};
    max-width: #{$column-width};
  }

  // Add breakpoint responsiveness
  @if $breakpoint {
    $bp-value: map-get($breakpoints, $breakpoint);
    @media (max-width: #{$bp-value}) {
      flex: 0 0 100%;
      max-width: 100%;
    }
  }

  // Padding for spacing inside the column (if gutter is defined)
  @if $grid-gutter != 0 {
    padding-left: math.div($grid-gutter, 2);
    padding-right: math.div($grid-gutter, 2);
  }
  @else {
    padding-left: 0;
    padding-right: 0;
  }
}

// Column Class
[class*="col-"] {
  @include col(1); // By default, use 1 column width
}

// Responsive Column Classes
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    @include col($i);
  }

  @each $breakpoint, $value in $breakpoints {
    .col-#{$i}-#{$breakpoint} {
      @include col($i, $breakpoint);
    }
  }
}

// Apply horizontal gaps (gx-* classes) directly to the columns
// This ensures the gap is between individual columns.
@for $i from 1 through 5 { // gx-1 to gx-5
  .gx-#{$i} {
    .col-#{$i} {
      margin-left: math.div($grid-gutter, 2);
      margin-right: math.div($grid-gutter, 2);
    }
  }
}
